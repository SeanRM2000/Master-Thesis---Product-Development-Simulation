DOE(
	Easy DOE,
	{usage( 1 ), Add Response( Minimize, "Cost", ., ., . ),
	Add Response( Minimize, "Lead Time", ., ., . ),
	Add Response( Minimize, "Risk", ., ., . ),
	Add Response( Maximize, "Rework Effectivness", 0, 1, . ),
	Add Response( Minimize, "Average Iterations", ., ., . ),
	Add Response( Maximize, "FPY", ., ., . ),
	Add Response( Minimize, "Physical Cost", 0, 1, . ),
	Add Response( Maximize, "Work Efficiency", 0, 1, . ),
	Add Response( Maximize, "Average Consitency", 0, 1, . ),
	Add Factor( Continuous, -0.5, 0.5, "T_Acc (old)", 0 ),
	Add Factor( Continuous, 0.2, 0.8, "T_I (old)", 0 ),
	Add Factor( Continuous, 1, 3, "DL_Eng", 0 ),
	Add Factor( Continuous, 1, 3, "DL_EKM", 0 ),
	Add Factor( Categorical, {"False", "True"}, "New Tool", 0 ),
	Add Factor( Continuous, 0.2, 0.8, "T_Acc (new)", 0 ),
	Add Factor( Continuous, 0.2, 0.8, "T_I (new)", 0 ),
	Add Factor( Continuous, 1, 3, "T_Usab", 0 ), Set Random Seed( 53587016 ),
	Add Term( {1, 0} ), Add Term( {1, 1} ), Add Term( {2, 1} ), Add Term( {3, 1} ),
	Add Term( {4, 1} ), Add Term( {5, 1} ), Add Term( {6, 1} ), Add Term( {7, 1} ),
	Add Term( {8, 1} ), Add Term( {1, 2} ), Add Term( {1, 1}, {2, 1} ),
	Add Term( {2, 2} ), Add Term( {1, 1}, {3, 1} ), Add Term( {2, 1}, {3, 1} ),
	Add Term( {3, 2} ), Add Term( {1, 1}, {4, 1} ), Add Term( {2, 1}, {4, 1} ),
	Add Term( {3, 1}, {4, 1} ), Add Term( {4, 2} ), Add Term( {1, 1}, {5, 1} ),
	Add Term( {2, 1}, {5, 1} ), Add Term( {3, 1}, {5, 1} ),
	Add Term( {4, 1}, {5, 1} ), Add Term( {1, 1}, {6, 1} ),
	Add Term( {2, 1}, {6, 1} ), Add Term( {3, 1}, {6, 1} ),
	Add Term( {4, 1}, {6, 1} ), Add Term( {5, 1}, {6, 1} ), Add Term( {6, 2} ),
	Add Term( {1, 1}, {7, 1} ), Add Term( {2, 1}, {7, 1} ),
	Add Term( {3, 1}, {7, 1} ), Add Term( {4, 1}, {7, 1} ),
	Add Term( {5, 1}, {7, 1} ), Add Term( {6, 1}, {7, 1} ), Add Term( {7, 2} ),
	Add Term( {1, 1}, {8, 1} ), Add Term( {2, 1}, {8, 1} ),
	Add Term( {3, 1}, {8, 1} ), Add Term( {4, 1}, {8, 1} ),
	Add Term( {5, 1}, {8, 1} ), Add Term( {6, 1}, {8, 1} ),
	Add Term( {7, 1}, {8, 1} ), Add Term( {8, 2} ), Add Alias Term( {1, 1}, {2, 1} ),
	Add Alias Term( {1, 1}, {3, 1} ), Add Alias Term( {1, 1}, {4, 1} ),
	Add Alias Term( {1, 1}, {5, 1} ), Add Alias Term( {1, 1}, {6, 1} ),
	Add Alias Term( {1, 1}, {7, 1} ), Add Alias Term( {1, 1}, {8, 1} ),
	Add Alias Term( {2, 1}, {3, 1} ), Add Alias Term( {2, 1}, {4, 1} ),
	Add Alias Term( {2, 1}, {5, 1} ), Add Alias Term( {2, 1}, {6, 1} ),
	Add Alias Term( {2, 1}, {7, 1} ), Add Alias Term( {2, 1}, {8, 1} ),
	Add Alias Term( {3, 1}, {4, 1} ), Add Alias Term( {3, 1}, {5, 1} ),
	Add Alias Term( {3, 1}, {6, 1} ), Add Alias Term( {3, 1}, {7, 1} ),
	Add Alias Term( {3, 1}, {8, 1} ), Add Alias Term( {4, 1}, {5, 1} ),
	Add Alias Term( {4, 1}, {6, 1} ), Add Alias Term( {4, 1}, {7, 1} ),
	Add Alias Term( {4, 1}, {8, 1} ), Add Alias Term( {5, 1}, {6, 1} ),
	Add Alias Term( {5, 1}, {7, 1} ), Add Alias Term( {5, 1}, {8, 1} ),
	Add Alias Term( {6, 1}, {7, 1} ), Add Alias Term( {6, 1}, {8, 1} ),
	Add Alias Term( {7, 1}, {8, 1} ), Set Sample Size( 100 ),
	Optimality Criterion( "Make I-Optimal Design" ), Simulate Responses( 0 ),
	Save X Matrix( 0 )},
	Set Generators(
		{usage( 1 ), define, model(
			guidedradio( 3 ),
			guidedoptions( 16, 22, 44, 100 ),
			flexibleradio( 0 ),
			flexibleoptions(
				dsd( 0, 2, 4 ),
				custom(
					runchoice( 2, 44, 50, 100 ),
					msamplesize( 100 ),
					wholesubplot( ., 0 ),
					misc( 0, 0 )
				)
			)
		), Design(
			mfactorsettings(
				[0, -0.5, 0, 0.5, 0.5, 0.5, 0.5, 0, 0, -0.5, 0, 0.5, 0.5, -0.5, -0.5,
				-0.5, 0, -0.5, 0, 0.5, 0, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0.5,
				0, -0.5, -0.5, -0.5, -0.5, 0.5, 0, -0.5, 0, -0.5, -0.5, -0.5, 0, 0,
				-0.5, 0.5, 0.5, 0.5, 0, -0.5, -0.5, 0, 0, 0, -0.5, 0.5, -0.5, 0.5,
				-0.5, -0.5, 0, 0, 0.5, 0, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0, 0.5,
				0.5, -0.5, -0.5, 0, -0.5, 0.5, 0.5, 0.5, -0.5, 0, 0.5, -0.5, 0.5,
				0.5, 0, 0, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0, 0.5, 0, 0, 0.5,
				0.2, 0.5, 0.5, 0.5, 0.8, 0.8, 0.5, 0.5, 0.5, 0.8, 0.8, 0.2, 0.2, 0.8,
				0.2, 0.2, 0.2, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 0.2, 0.8, 0.2, 0.2, 0.2,
				0.5, 0.2, 0.5, 0.8, 0.8, 0.2, 0.2, 0.8, 0.2, 0.5, 0.2, 0.8, 0.8, 0.2,
				0.8, 0.5, 0.2, 0.5, 0.8, 0.5, 0.5, 0.5, 0.8, 0.5, 0.8, 0.8, 0.2, 0.2,
				0.5, 0.8, 0.2, 0.8, 0.8, 0.2, 0.2, 0.5, 0.2, 0.8, 0.2, 0.2, 0.2, 0.8,
				0.8, 0.2, 0.8, 0.5, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 0.2, 0.8, 0.2, 0.2,
				0.8, 0.2, 0.2, 0.5, 0.8, 0.2, 0.2, 0.8, 0.2, 0.5, 0.8, 0.2, 0.8, 0.5,
				0.5, 0.8, 2, 3, 2, 3, 1, 2, 1, 1, 2, 3, 1, 1, 3, 2, 1, 3, 3, 1, 2, 2,
				3, 1, 2, 1, 1, 1, 3, 1, 3, 2, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3,
				2, 2, 1, 3, 2, 2, 3, 3, 2, 3, 2, 3, 1, 1, 1, 2, 2, 2, 3, 3, 2, 1, 1,
				1, 1, 2, 2, 3, 2, 1, 2, 1, 2, 3, 1, 3, 3, 3, 1, 3, 3, 3, 2, 3, 1, 1,
				1, 3, 3, 3, 2, 1, 1, 3, 2, 2, 3, 1, 2, 2, 3, 3, 3, 2, 3, 2, 3, 1, 1,
				3, 1, 2, 3, 3, 2, 2, 1, 1, 3, 3, 1, 1, 3, 3, 2, 2, 1, 2, 3, 2, 1, 1,
				1, 3, 3, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 2, 1, 3, 1, 2,
				3, 1, 3, 3, 2, 2, 3, 3, 2, 1, 3, 1, 3, 1, 1, 3, 1, 2, 3, 3, 3, 1, 1,
				1, 1, 2, 3, 3, 1, 3, 3, 3, 1, 3, 3, 2, 3, 1, 1, 2, 2, 1, 2, 2, 1, 1,
				2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1,
				1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1,
				2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2,
				1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1,
				2, 2, 1, 1, 0.2, 0.2, 0.5, 0.2, 0.8, 0.2, 0.5, 0.2, 0.5, 0.8, 0.2,
				0.5, 0.2, 0.5, 0.2, 0.2, 0.5, 0.5, 0.8, 0.5, 0.2, 0.8, 0.5, 0.8, 0.2,
				0.8, 0.2, 0.2, 0.5, 0.2, 0.8, 0.8, 0.2, 0.8, 0.8, 0.8, 0.8, 0.8, 0.5,
				0.8, 0.2, 0.2, 0.5, 0.5, 0.2, 0.8, 0.2, 0.5, 0.8, 0.8, 0.5, 0.5, 0.8,
				0.5, 0.8, 0.8, 0.2, 0.2, 0.5, 0.8, 0.2, 0.8, 0.8, 0.2, 0.2, 0.5, 0.5,
				0.8, 0.8, 0.2, 0.2, 0.8, 0.2, 0.5, 0.5, 0.5, 0.8, 0.2, 0.8, 0.5, 0.2,
				0.8, 0.8, 0.8, 0.8, 0.5, 0.5, 0.2, 0.8, 0.2, 0.2, 0.2, 0.2, 0.8, 0.2,
				0.2, 0.8, 0.5, 0.5, 0.2, 0.5, 0.2, 0.5, 0.2, 0.2, 0.8, 0.2, 0.8, 0.5,
				0.2, 0.2, 0.8, 0.5, 0.5, 0.5, 0.8, 0.5, 0.8, 0.5, 0.2, 0.8, 0.8, 0.8,
				0.2, 0.2, 0.8, 0.8, 0.2, 0.5, 0.8, 0.8, 0.8, 0.8, 0.8, 0.2, 0.8, 0.2,
				0.5, 0.8, 0.2, 0.8, 0.2, 0.8, 0.5, 0.8, 0.5, 0.8, 0.5, 0.5, 0.8, 0.5,
				0.8, 0.2, 0.2, 0.8, 0.5, 0.2, 0.5, 0.2, 0.2, 0.2, 0.2, 0.8, 0.5, 0.2,
				0.5, 0.8, 0.5, 0.8, 0.8, 0.2, 0.5, 0.8, 0.5, 0.2, 0.5, 0.2, 0.8, 0.8,
				0.8, 0.2, 0.8, 0.2, 0.2, 0.5, 0.2, 0.5, 0.8, 0.2, 0.2, 0.2, 0.5, 0.8,
				0.5, 0.2, 0.5, 0.2, 0.5, 0.5, 0.2, 1, 2, 2, 2, 1, 1, 3, 2, 2, 1, 3,
				1, 1, 2, 2, 3, 2, 1, 2, 1, 2, 3, 1, 2, 1, 3, 3, 1, 1, 2, 3, 1, 2, 1,
				1, 1, 1, 1, 3, 2, 3, 3, 3, 2, 3, 3, 1, 2, 1, 3, 1, 2, 3, 2, 2, 1, 1,
				1, 1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 2, 1, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3,
				1, 2, 1, 2, 3, 2, 3, 1, 3, 3, 3, 3, 1, 2, 1, 2, 1, 2, 2, 3]
			),
			mplots( [](0, 1) ),
			dsdblockcol( [](0, 1) ),
			mnruns( 100 ),
			specificationstate(
				DOE(
					{usage( 1 ), Add Response( Minimize, "Cost", ., ., . ),
					Add Response( Minimize, "Lead Time", ., ., . ),
					Add Response( Minimize, "Risk", ., ., . ),
					Add Response( Maximize, "Rework Effectivness", 0, 1, . ),
					Add Response( Minimize, "Average Iterations", ., ., . ),
					Add Response( Maximize, "FPY", ., ., . ),
					Add Response( Minimize, "Physical Cost", 0, 1, . ),
					Add Response( Maximize, "Work Efficiency", 0, 1, . ),
					Add Response( Maximize, "Average Consitency", 0, 1, . ),
					Add Factor( Continuous, -0.5, 0.5, "T_Acc (old)", 0 ),
					Add Factor( Continuous, 0.2, 0.8, "T_I (old)", 0 ),
					Add Factor( Continuous, 1, 3, "DL_Eng", 0 ),
					Add Factor( Continuous, 1, 3, "DL_EKM", 0 ),
					Add Factor( Categorical, {"False", "True"}, "New Tool", 0 ),
					Add Factor( Continuous, 0.2, 0.8, "T_Acc (new)", 0 ),
					Add Factor( Continuous, 0.2, 0.8, "T_I (new)", 0 ),
					Add Factor( Continuous, 1, 3, "T_Usab", 0 ),
					Set Random Seed( 53587016 ), Add Term( {1, 0} ),
					Add Term( {1, 1} ), Add Term( {2, 1} ), Add Term( {3, 1} ),
					Add Term( {4, 1} ), Add Term( {5, 1} ), Add Term( {6, 1} ),
					Add Term( {7, 1} ), Add Term( {8, 1} ), Add Term( {1, 2} ),
					Add Term( {1, 1}, {2, 1} ), Add Term( {2, 2} ),
					Add Term( {1, 1}, {3, 1} ), Add Term( {2, 1}, {3, 1} ),
					Add Term( {3, 2} ), Add Term( {1, 1}, {4, 1} ),
					Add Term( {2, 1}, {4, 1} ), Add Term( {3, 1}, {4, 1} ),
					Add Term( {4, 2} ), Add Term( {1, 1}, {5, 1} ),
					Add Term( {2, 1}, {5, 1} ), Add Term( {3, 1}, {5, 1} ),
					Add Term( {4, 1}, {5, 1} ), Add Term( {1, 1}, {6, 1} ),
					Add Term( {2, 1}, {6, 1} ), Add Term( {3, 1}, {6, 1} ),
					Add Term( {4, 1}, {6, 1} ), Add Term( {5, 1}, {6, 1} ),
					Add Term( {6, 2} ), Add Term( {1, 1}, {7, 1} ),
					Add Term( {2, 1}, {7, 1} ), Add Term( {3, 1}, {7, 1} ),
					Add Term( {4, 1}, {7, 1} ), Add Term( {5, 1}, {7, 1} ),
					Add Term( {6, 1}, {7, 1} ), Add Term( {7, 2} ),
					Add Term( {1, 1}, {8, 1} ), Add Term( {2, 1}, {8, 1} ),
					Add Term( {3, 1}, {8, 1} ), Add Term( {4, 1}, {8, 1} ),
					Add Term( {5, 1}, {8, 1} ), Add Term( {6, 1}, {8, 1} ),
					Add Term( {7, 1}, {8, 1} ), Add Term( {8, 2} ),
					Add Alias Term( {1, 1}, {2, 1} ),
					Add Alias Term( {1, 1}, {3, 1} ),
					Add Alias Term( {1, 1}, {4, 1} ),
					Add Alias Term( {1, 1}, {5, 1} ),
					Add Alias Term( {1, 1}, {6, 1} ),
					Add Alias Term( {1, 1}, {7, 1} ),
					Add Alias Term( {1, 1}, {8, 1} ),
					Add Alias Term( {2, 1}, {3, 1} ),
					Add Alias Term( {2, 1}, {4, 1} ),
					Add Alias Term( {2, 1}, {5, 1} ),
					Add Alias Term( {2, 1}, {6, 1} ),
					Add Alias Term( {2, 1}, {7, 1} ),
					Add Alias Term( {2, 1}, {8, 1} ),
					Add Alias Term( {3, 1}, {4, 1} ),
					Add Alias Term( {3, 1}, {5, 1} ),
					Add Alias Term( {3, 1}, {6, 1} ),
					Add Alias Term( {3, 1}, {7, 1} ),
					Add Alias Term( {3, 1}, {8, 1} ),
					Add Alias Term( {4, 1}, {5, 1} ),
					Add Alias Term( {4, 1}, {6, 1} ),
					Add Alias Term( {4, 1}, {7, 1} ),
					Add Alias Term( {4, 1}, {8, 1} ),
					Add Alias Term( {5, 1}, {6, 1} ),
					Add Alias Term( {5, 1}, {7, 1} ),
					Add Alias Term( {5, 1}, {8, 1} ),
					Add Alias Term( {6, 1}, {7, 1} ),
					Add Alias Term( {6, 1}, {8, 1} ),
					Add Alias Term( {7, 1}, {8, 1} ), Set Sample Size( 100 ),
					Optimality Criterion( "Make I-Optimal Design" ),
					Simulate Responses( 0 ), Save X Matrix( 0 )}
				)
			),
			dsdplan( 0 ),
			externaldesign( 0 )
		), dataentry(
			response(
				[2097.6, 1595.4, 1407.5, 1144.9, 1130.5, 1144.6, 1799.4, 1843.5,
				1411, 1282.7, 2113, 2098.5, 1295, 1507.8, 2190.1, 1692.6, 1443.7,
				1608.3, 977.4, 1530.9, 1752.3, 1535.1, 1069, 2318.3, 1492.3, 1876.4,
				1256.5, 1680, 1400.1, 1705.8, 1416.4, 890.1, 1356.3, 1659.4, 2404.4,
				1480.4, 1476.3, 1323.3, 1962.9, 1594.4, 1760.3, 2104.6, 1231.7,
				1459.2, 2255.2, 1740.8, 1163.8, 1247.3, 1433.8, 1762.8, 1463.4,
				1365.7, 1364.4, 1260.5, 2065.4, 1617.3, 2270.2, 1516.7, 1592.8,
				1575.6, 1444.8, 1511.7, 1069.7, 1428.6, 1915.8, 1803.5, 1990.8,
				2703.5, 1677.5, 1492.4, 1345.3, 1654.4, 1703.4, 1474, 2017.3, 1422.7,
				1094, 1363.4, 1014.6, 1170.1, 2052.7, 1867.8, 1623.6, 1263.2, 855.7,
				1314.2, 1935.7, 1680.3, 1374.2, 1916.8, 1805.3, 1281.7, 1593.4,
				1015.1, 1556.1, 2348.6, 1004.5, 1419, 1404.8, 1148.9, 137.2, 104.7,
				82.7, 69.3, 86.2, 79.8, 134.7, 132, 95.3, 77.6, 159, 140.5, 86.2,
				88.9, 151.7, 109.4, 94.2, 119.3, 69.7, 101.8, 115, 97.2, 66.9, 159.6,
				93.1, 136.3, 73.2, 99.6, 82.2, 94.8, 96.6, 63, 90.3, 104.9, 136.6,
				92.2, 103.5, 97.2, 115.4, 100.3, 107.7, 116.1, 74.9, 85.9, 145.6,
				103.3, 70.4, 84.6, 84.3, 99.9, 98.6, 92.9, 80.3, 77, 113.4, 96.8,
				158, 111.4, 105.2, 111.2, 101.6, 87.1, 68.3, 84.1, 139.1, 137.8,
				116.4, 189.8, 96.7, 88.2, 92.4, 90.6, 127, 87.2, 117.7, 83.8, 76.2,
				88.3, 63.2, 78.9, 112.7, 137.3, 88.9, 83.1, 60.5, 76.5, 122.9, 102.4,
				88.7, 112.5, 120.1, 77.9, 91.4, 69.2, 99.3, 133.3, 68.7, 95.7, 82.6,
				69.4, 32127.7, 5315.5, 857.4, 272.4, 883.4, 643.2, 27079, 20221.9,
				3029.5, 496, 66258.7, 33186.8, 1299.7, 1941.5, 50501.9, 7502.2, 2372,
				10942.5, 131.4, 5690.4, 9068.5, 2117.8, 114, 66139.7, 1759.1,
				28669.8, 399.2, 3384.7, 994.2, 4858.4, 3139, 14.4, 1151.3, 5266.1,
				32724.8, 1473, 3949, 1749.9, 10827.3, 3252.6, 8563.5, 11614.7, 377.5,
				1735.5, 43113.6, 4364.9, 350.9, 1634.9, 1177.4, 4064.7, 2692.9,
				2200.3, 616.2, 489.3, 12469.6, 3173.5, 66718.3, 6266.3, 7215.3,
				7867.5, 6327.7, 1580.5, 237.3, 863.5, 35620.3, 26657.5, 12729.1,
				150660.9, 2749.9, 1010.3, 1513.2, 2103.1, 17341.1, 1063.1, 10946.9,
				1129.6, 143.3, 659.4, 58.7, 576, 11722.2, 25756.1, 1839.4, 1681.8,
				96.1, 563.5, 14413.3, 2502.9, 1117.3, 8582.9, 13222.4, 220.9, 1848.1,
				33.6, 3796.4, 30757.7, 50.8, 3010, 893.7, 403.5, 0.203, 0.193, 0.209,
				0.24, 0.313, 0.248, 0.242, 0.216, 0.225, 0.195, 0.209, 0.229, 0.244,
				0.189, 0.201, 0.185, 0.219, 0.218, 0.297, 0.25, 0.196, 0.218, 0.248,
				0.226, 0.239, 0.233, 0.235, 0.236, 0.199, 0.233, 0.225, 0.3, 0.201,
				0.256, 0.197, 0.24, 0.273, 0.281, 0.203, 0.211, 0.204, 0.177, 0.206,
				0.201, 0.187, 0.237, 0.235, 0.255, 0.205, 0.183, 0.204, 0.222, 0.2,
				0.211, 0.18, 0.237, 0.205, 0.24, 0.208, 0.213, 0.21, 0.195, 0.308,
				0.204, 0.234, 0.218, 0.2, 0.199, 0.182, 0.19, 0.205, 0.239, 0.243,
				0.192, 0.206, 0.206, 0.277, 0.244, 0.248, 0.253, 0.182, 0.209, 0.237,
				0.276, 0.324, 0.237, 0.21, 0.213, 0.243, 0.201, 0.238, 0.194, 0.183,
				0.313, 0.216, 0.202, 0.316, 0.221, 0.209, 0.239, 17, 15.1, 14.3,
				13.3, 12.4, 12, 13.5, 13.7, 15.7, 12.6, 14.6, 17.1, 14.4, 15, 16,
				16.7, 17, 14.8, 13.8, 15.2, 16.2, 12.2, 12, 16.9, 13.6, 15.1, 14.5,
				14.8, 14.7, 15.7, 16, 13.2, 13.4, 18.1, 16.7, 13.5, 15.9, 14.4, 15.9,
				12.9, 14.6, 17.4, 13.2, 14.7, 17.4, 14.4, 13.8, 14, 14.5, 16.1, 16.9,
				15.6, 14.8, 13, 17.1, 14.6, 16, 12.5, 17.7, 16.6, 12.7, 15.9, 15.3,
				14.4, 14.9, 12.3, 15.9, 17.7, 16.2, 14.9, 12.9, 15.4, 13.5, 14.2,
				15.3, 14.5, 15.2, 12, 11.9, 14.1, 17, 15.9, 15.6, 16.9, 12.6, 14.7,
				18.4, 13.8, 12.1, 15.7, 16, 12.7, 16, 13.9, 12.3, 16.5, 14.2, 15.8,
				14.3, 13.7, 0.055, 0.058, 0.058, 0.069, 0.132, 0.066, 0.066, 0.059,
				0.075, 0.057, 0.057, 0.068, 0.071, 0.058, 0.056, 0.057, 0.065, 0.058,
				0.137, 0.077, 0.052, 0.059, 0.071, 0.061, 0.066, 0.065, 0.065, 0.066,
				0.053, 0.068, 0.064, 0.129, 0.059, 0.089, 0.059, 0.063, 0.114, 0.128,
				0.059, 0.057, 0.055, 0.052, 0.059, 0.058, 0.055, 0.065, 0.06, 0.075,
				0.061, 0.057, 0.062, 0.07, 0.058, 0.059, 0.057, 0.063, 0.058, 0.06,
				0.062, 0.059, 0.056, 0.057, 0.139, 0.062, 0.062, 0.06, 0.055, 0.054,
				0.055, 0.056, 0.055, 0.069, 0.063, 0.056, 0.056, 0.057, 0.101, 0.062,
				0.067, 0.075, 0.059, 0.055, 0.068, 0.124, 0.152, 0.063, 0.057, 0.058,
				0.062, 0.06, 0.07, 0.06, 0.058, 0.129, 0.058, 0.057, 0.126, 0.061,
				0.057, 0.066, 0.585, 0.675, 0.721, 0.73, 0.473, 0.695, 0.531, 0.587,
				0.609, 0.794, 0.534, 0.497, 0.647, 0.746, 0.563, 0.678, 0.617, 0.571,
				0.547, 0.551, 0.649, 0.677, 0.744, 0.481, 0.636, 0.526, 0.701, 0.605,
				0.744, 0.625, 0.598, 0.607, 0.724, 0.477, 0.603, 0.636, 0.429, 0.452,
				0.626, 0.675, 0.659, 0.678, 0.777, 0.727, 0.603, 0.602, 0.732, 0.609,
				0.724, 0.713, 0.631, 0.629, 0.75, 0.756, 0.675, 0.609, 0.549, 0.609,
				0.598, 0.564, 0.667, 0.725, 0.533, 0.724, 0.524, 0.569, 0.63, 0.501,
				0.722, 0.745, 0.71, 0.62, 0.543, 0.745, 0.624, 0.723, 0.553, 0.664,
				0.763, 0.633, 0.674, 0.545, 0.633, 0.515, 0.584, 0.684, 0.547, 0.651,
				0.663, 0.635, 0.558, 0.793, 0.736, 0.529, 0.678, 0.596, 0.521, 0.612,
				0.721, 0.728, 0.373, 0.521, 0.551, 0.518, 0.744, 0.666, 0.702, 0.735,
				0.591, 0.632, 0.696, 0.533, 0.479, 0.583, 0.646, 0.53, 0.52, 0.787,
				0.662, 0.427, 0.44, 0.77, 0.635, 0.521, 0.694, 0.695, 0.454, 0.604,
				0.516, 0.345, 0.631, 0.662, 0.645, 0.396, 0.499, 0.693, 0.643, 0.708,
				0.614, 0.763, 0.709, 0.322, 0.616, 0.553, 0.42, 0.575, 0.522, 0.57,
				0.552, 0.405, 0.544, 0.634, 0.543, 0.649, 0.322, 0.626, 0.558, 0.739,
				0.542, 0.575, 0.675, 0.471, 0.472, 0.552, 0.673, 0.798, 0.615, 0.561,
				0.511, 0.583, 0.61, 0.343, 0.738, 0.578, 0.584, 0.552, 0.565, 0.754,
				0.601, 0.568, 0.322, 0.745, 0.308, 0.467, 0.633, 0.49, 0.367, 0.697,
				0.755, 0.637, 0.328, 0.632, 0.474, 0.565, 0.771, 0.499, 0.486, 0.591,
				0.551, 0.521, 0.463, 0.642, 0.631, 0.661, 0.764, 0.752, 0.642, 0.665,
				0.665, 0.75, 0.605, 0.509, 0.538, 0.601, 0.509, 0.545, 0.568, 0.747,
				0.726, 0.561, 0.545, 0.746, 0.751, 0.504, 0.609, 0.555, 0.539, 0.525,
				0.632, 0.463, 0.668, 0.756, 0.725, 0.448, 0.456, 0.609, 0.538, 0.666,
				0.514, 0.716, 0.598, 0.454, 0.717, 0.63, 0.465, 0.544, 0.603, 0.654,
				0.631, 0.538, 0.651, 0.697, 0.6, 0.718, 0.459, 0.545, 0.545, 0.722,
				0.581, 0.649, 0.752, 0.538, 0.521, 0.631, 0.55, 0.75, 0.513, 0.481,
				0.535, 0.601, 0.755, 0.461, 0.613, 0.662, 0.531, 0.632, 0.674, 0.756,
				0.752, 0.622, 0.459, 0.64, 0.461, 0.514, 0.761, 0.542, 0.49, 0.66,
				0.755, 0.528, 0.469, 0.75, 0.537, 0.643, 0.747, 0.46, 0.617, 0.668,
				0.631, 0.602]
			),
			mcustommodel(
				Fit Model(
					Effects(
						:"T_Acc (old)"n, :"T_I (old)"n, :DL_Eng, :DL_EKM, :New Tool,
						:"T_Acc (new)"n, :"T_I (new)"n, :T_Usab,
						:"T_Acc (old)"n * :"T_Acc (old)"n,
						:"T_Acc (old)"n * :"T_I (old)"n,
						:"T_I (old)"n * :"T_I (old)"n, :"T_Acc (old)"n * :DL_Eng,
						:"T_I (old)"n * :DL_Eng, :DL_Eng * :DL_Eng,
						:"T_Acc (old)"n * :DL_EKM, :"T_I (old)"n * :DL_EKM,
						:DL_Eng * :DL_EKM, :DL_EKM * :DL_EKM,
						:"T_Acc (old)"n * :New Tool, :"T_I (old)"n * :New Tool,
						:DL_Eng * :New Tool, :DL_EKM * :New Tool,
						:"T_Acc (old)"n * :"T_Acc (new)"n,
						:"T_I (old)"n * :"T_Acc (new)"n, :DL_Eng * :"T_Acc (new)"n,
						:DL_EKM * :"T_Acc (new)"n, :New Tool * :"T_Acc (new)"n,
						:"T_Acc (new)"n * :"T_Acc (new)"n,
						:"T_Acc (old)"n * :"T_I (new)"n,
						:"T_I (old)"n * :"T_I (new)"n, :DL_Eng * :"T_I (new)"n,
						:DL_EKM * :"T_I (new)"n, :New Tool * :"T_I (new)"n,
						:"T_Acc (new)"n * :"T_I (new)"n,
						:"T_I (new)"n * :"T_I (new)"n, :"T_Acc (old)"n * :T_Usab,
						:"T_I (old)"n * :T_Usab, :DL_Eng * :T_Usab,
						:DL_EKM * :T_Usab, :New Tool * :T_Usab,
						:"T_Acc (new)"n * :T_Usab, :"T_I (new)"n * :T_Usab,
						:T_Usab * :T_Usab
					),
					Y(
						:Cost, :Lead Time, :Risk, :Rework Effectivness,
						:Average Iterations, :FPY, :Physical Cost, :Work Efficiency,
						:Average Consitency
					)
				)
			)
		), datastate( 0, 0 ), jmppro( 1 ), analyze(
			guidedmodel(
				lineproperty(
					[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 3, 3,
					2, 3, 3, 3, 3, 3, 2, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 2, 3, 1,
					1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1,
					0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1,
					1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,
					0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
					1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
					0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
					1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,
					1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
					1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
					0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
					1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0,
					0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1,
					1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
					1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1,
					1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,
					1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
					1]
				)
			),
			flexiblemodel(
				fitplan(
					{{Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}, {Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}, {Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}, {Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}, {Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}, {Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}, {Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}, {Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}, {Fit(
						Estimation Method( "Pruned Forward Selection" ),
						Validation Method( "AICc" ),
						Enforce Heredity( 1 )
					)}}
				)
			)
		), predict( {} ), tabindex( 5 ),
		Prediction Profiler(
			1,
			Confidence Intervals( 1 ),
			Desirability Functions( 0 ),
			Term Value(
				:"T_Acc (old)"n( 0, Lock( 0 ), Show( 1 ) ),
				:"T_I (old)"n( 0.5, Lock( 0 ), Show( 1 ) ),
				:DL_Eng( 2, Lock( 0 ), Show( 1 ) ),
				:DL_EKM( 2, Lock( 0 ), Show( 1 ) ),
				:New Tool( "False", Lock( 0 ), Show( 1 ) ),
				:"T_Acc (new)"n( 0.5, Lock( 0 ), Show( 1 ) ),
				:"T_I (new)"n( 0.5, Lock( 0 ), Show( 1 ) ),
				:T_Usab( 2, Lock( 0 ), Show( 1 ) )
			)
		)}
	)
)